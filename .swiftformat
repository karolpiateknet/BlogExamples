# Rules & options documentation: https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md

# Exclude files

--exclude **/Mock.generated.swift, **/Generated/*, **/Sourcery/*

# Format Options

--swiftversion 5.7
--allman false
--commas always
--comments indent
--elseposition same-line
--guardelse auto
--emptybraces no-space
--extensionacl on-extension
--funcattributes same-line
--typeattributes same-line
--varattributes same-line
--ifdef indent
--indent 4
--indentcase false
--linebreaks lf
--maxwidth 180
--operatorfunc spaced
--ranges no-space
--patternlet hoist
--redundanttype inferred
--semicolons never
--stripunusedargs closure-only
--wraparguments before-first
--wrapcollections before-first
--wrapparameters before-first
--self remove
--marktypes never
--markextensions always

# Enabled rules

--enable andOperator                  # Prefer comma over && in if, guard or while conditions.
--enable anyObjectProtocol            # Prefer AnyObject over class in protocol definitions.
--enable assertionFailures            # Changes all instances of assert(false, ...) to assertionFailure(...) and precondition(false, ...) to preconditionFailure(...).
--enable blankLineAfterImports          # Insert blank line after import statements.
--enable blankLinesAroundMark         # Insert blank line before and after MARK: comments.
--enable blankLinesAtStartOfScope     # Remove leading blank line at the start of a scope.
--enable blankLinesAtEndOfScope       # Remove trailing blank line at the end of a scope.
--enable blankLinesBetweenScopes      # Insert blank line before class, struct, enum, extension, protocol or function declarations.
--enable braces                       # Wrap braces in accordance with selected style (K&R or Allman). Options: allman
--enable consecutiveBlankLines        # Replace consecutive blank lines with a single blank line.
--enable consecutiveSpaces            # Replace consecutive spaces with a single space.
--enable duplicateImports             # Remove duplicate import statements.
--enable elseOnSameLine               # Place else, catch or while keyword in accordance with current style (same or next line). Options: --elseposition
--enable emptyBraces                  # Remove whitespace inside empty braces.
--enable enumNamespaces               # Converts types used for hosting only static members into enums.
--enable extensionAccessControl       # Configure the placement of an extension's access control keyword. Options: --extensionacl
--enable genericExtensions            # When extending generic types, use angle brackets (extension Array<Foo>) instead of generic type constraints (extension Array where Element == Foo).
--enable hoistPatternLet              # Reposition let or var bindings within pattern. Options: --patternlet
--enable indent                       # Indent code in accordance with the scope level. Options: --indent, --tabwidth, --smarttabs, --indentcase, --ifdef, --xcodeindentation
--enable initCoderUnavailable         # Add @available(*, unavailable) attribute to required init(coder:) when it hasn't been implemented.
--enable leadingDelimiters            # Move leading delimiters to the end of the previous line.
--enable linebreakAtEndOfFile         # Add empty blank line at end of file. Options: --linebreaks
--enable linebreaks                   # Use specified linebreak character for all linebreaks (CR, LF or CRLF).
--enable marktypes                    # Adds a mark comment before top-level types and extensions.
--enable modifierorder                # Use consistent ordering for member modifiers. Options: --modifierorder
--enable preferKeyPath                # Convert trivial map { $0.foo } closures to keyPath-based syntax.
--enable redundantBackticks           # Remove redundant backticks around identifiers.
--enable redundantBreak               # Remove redundant break in switch case.
--enable redundantClosure             # Removes redundant closures bodies, containing a single statement, which are called immediately.
--enable redundantExtensionACL        # Remove redundant access control specifiers.
--enable redundantFileprivate         # Prefer private over fileprivate where equivalent.
--enable redundantGet                 # Remove unneeded get clause inside computed properties.
--enable redundantInit                # Remove explicit init if not required.
--enable redundantLet                 # Remove redundant let/var from ignored variables.
--enable redundantLetError            # Remove redundant let error from catch clause.
--enable redundantNilInit             # Remove redundant nil default value (Optional vars are nil by default).
--enable redundantObjc                # Remove redundant @objc annotations.
--enable redundantOptionalBinding     # Removes redundant identifiers in optional binding conditions.
--enable redundantParens              # Remove redundant parentheses.
--enable redundantPattern             # Remove redundant pattern matching parameter syntax.
--enable redundantRawValues           # Remove redundant raw string values for enum cases.
--enable redundantReturn              # Remove unneeded return keyword.
--enable redundantType                # Remove redundant type from variable declarations.
--enable redundantVoidReturnType      # Remove explicit Void return type.
--enable redundantSelf                # Insert/remove explicit self where applicable. Options: --self, --selfrequired
--enable semicolons                   # Remove semicolons. Options: --semicolons
--enable sortedImports                # Sort import statements alphabetically.
--enable spaceAroundBraces            # Add or remove space around curly braces.
--enable spaceAroundBrackets          # Add or remove space around square brackets.
--enable spaceAroundComments          # Add space before and/or after comments.
--enable spaceAroundGenerics          # Remove space around angle brackets.
--enable spaceAroundOperators         # Add or remove space around operators or delimiters. Options: --operatorfunc, --nospaceoperators
--enable spaceAroundParens            # Add or remove space around parentheses.
--enable spaceInsideBraces            # Add or remove space inside curly braces.
--enable spaceInsideBrackets          # Remove space inside square brackets.
--enable spaceInsideComments          # Add leading and/or trailing space inside comments.
--enable spaceInsideGenerics          # Remove space inside angle brackets.
--enable spaceInsideParens            # Remove space inside parentheses.
--enable strongOutlets                # Remove weak specifier from @IBOutlet properties.
--enable strongifiedSelf              # Remove backticks around self in Optional unwrap expressions.
--enable todos                        # Use correct formatting for TODO:, MARK: or FIXME: comments.
--enable trailingClosures             # Use trailing closure syntax where applicable. Options: --trailingclosures
--enable trailingCommas               # Add or remove trailing comma from the last item in a collection literal. Options: --commas
--enable trailingSpace                # Remove trailing space at end of a line. Options: --trimwhitespace
--enable typeSugar                    # Prefer shorthand syntax for Arrays, Dictionaries and Optionals.
--enable unusedArguments              # Mark unused function arguments with _. Options: --stripunusedargs
--enable wrap                         # Wrap lines that exceed the specified maximum width.
--enable wrapArguments                # Align wrapped function arguments or collection elements. Options: --wraparguments, --wrapparameters,  --wrapcollections,  --closingparen
--enable wrapAttributes               # Wrap @attributes onto a separate line, or keep them on the same line.
--enable wrapEnumCases                # Writes one enum case per line.
--enable wrapSwitchCases              # Writes one switch case per line.
--enable yodaConditions               # Prefer constant values to be on the right-hand-side of expressions.

# Disabled rules

--disable acronyms                     # Capitalizes acronyms when the first character is capitalized.
--disable fileHeader                   # Use specified source file header template for all files. Options: --header
--disable isEmpty                      # In rare cases, the isEmpty rule may insert an isEmpty call for a type that doesn't implement that property, breaking the program. For this reason, the rule is disabled by default, and must be manually enabled via the --enable isEmpty option.
--disable sortDeclarations             # Sorts the body of declarations with // swiftformat:sort and declarations between // swiftformat:sort:begin and // swiftformat:sort:end comments.
--disable sortedSwitchCases            # Sorts switch cases alphabetically.
--disable organizeDeclarations         # Organizes declarations within class, struct, and enum bodies. Options: --categorymark, --beforemarks, --lifecycle, --structthreshold, --classthreshold, --enumthreshold
--disable blankLinesBetweenImports     # Remove blank lines between import statements.
--disable blockComments                # Changes block comments to single line comments.
--disable numberFormatting             # Use consistent grouping for numeric literals. Options: --decimalgrouping, --binarygrouping, --octalgrouping, --hexgrouping, --fractiongrouping, --exponentgrouping, --hexliteralcase, --exponentcase
--disable wrapMultilineStatementBraces # Wrap the opening brace of multiline statements.
--disable void                         # Use Void for type declarations and () for values. Options: --voidtype

# Temporary disabled due to not supported some keyword in SwityMocky https://github.com/MakeAWishFoundation/SwiftyMocky/issues/327
--disable opaqueGenericParameters      # Use opaque generic parameters (some Protocol) instead of generic parameters with constraints (T where T: Protocol, etc) where equivalent.
